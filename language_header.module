<?php
/**
 * @file
 * Language header module.
 */

define('LANGUAGE_HEADER_HEADER', 'X-Accept-Language');

/**
 * Implements hook_menu().
 */
function language_header_menu() {
  $items = array();

  $items['admin/config/regional/language/configure/header'] = array(
    'title' => 'Configure HTTP header language negotiation',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('language_header_admin_form'),
    'access arguments' => array('administer languages'),
    'file' => 'language_header.admin.inc',
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );

  return $items;
}

/**
 * Implements hook_language_negotiation_info().
 */
function language_header_language_negotiation_info() {
  return array(
    'language_header' => array(
      'types' => drupal_language_types(),
      'callbacks' => array(
        'language' => 'language_header_language',
      ),
      'weight' => -5,
      'name' => t('HTTP header'),
      'description' => t('Determine the language from HTTP header'),
      'config' => 'admin/config/regional/language/configure/header',
    ),
  );
}

/**
 * Identify language from a custom HTTP header.
 *
 * @see language_initialize()
 * @see language_provider_invoke()
 *
 * @param \stdClass[] $languages
 *   An associative array of enabled languages.
 *
 * @return string|bool
 *   Valid language code or FALSE if header is not set or language
 *   code is not valid. FALSE needs to be returned to allow other
 *   language providers to determine the language code.
 */
function language_header_language(array $languages) {
  $header = 'HTTP_' . str_replace('-', '_', strtoupper(
    variable_get('language_header_header', LANGUAGE_HEADER_HEADER)));

  return isset($_SERVER[$header], $languages[$_SERVER[$header]])
    ? $_SERVER[$header] : FALSE;
}
